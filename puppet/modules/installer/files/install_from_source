#!/bin/bash

# Exit immediately on error
set -e

# Get our prefix
PREFIX="$1"
METHOD="$2"
LTO="$3"
# -mmovbe isn't enabled as it was specific to atom CPUs until haswell
DARWIN_OPTIMISATION_FLAGS="-march=bonnell -mtune=bonnell -mno-movbe -mfxsr -mmmx -msahf -msse -msse2 -msse3 -mssse3 --param l1-cache-size=24 --param l1-cache-line-size=64 --param l2-cache-size=512"
shift 3

if [[ $LTO == "true" ]]; then
    echo "Using LTO"
    export CFLAGS="$CFLAGS -I$PREFIX/include $DARWIN_OPTIMISATION_FLAGS -fuse-linker-plugin -flto -ffat-lto-objects -Os"
    export CXXFLAGS="$CXXFLAGS -I$PREFIX/include $DARWIN_OPTIMISATION_FLAGS -fuse-linker-plugin -flto -ffat-lto-objects -Os"
    export LDFLAGS="$LDFLAGS -L$PREFIX/lib"
else
    echo "Not using LTO"
    export CFLAGS="$CFLAGS -I$PREFIX/include $DARWIN_OPTIMISATION_FLAGS -O3"
    export CXXFLAGS="$CXXFLAGS -I$PREFIX/include $DARWIN_OPTIMISATION_FLAGS -O3"
    export LDFLAGS="$LDFLAGS -L$PREFIX/lib"
fi

# Say what we're doing!
echo "Installing $(basename $(pwd)) to $PREFIX"

# Set our package config so it finds things in the toolchain
export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"

# Set our prefix so CMAKE finds things in the toolchain
export CMAKE_PREFIX_PATH=$PREFIX

# We are using autotools
if [[ $METHOD == 'autotools' || ($METHOD == 'auto' && -e "configure") ]]; then
    echo "Configuring using autotools"

    # Run configure
    ./configure $@ --prefix="$PREFIX"

    # Run make
    make -j$(nproc)

    # Run make install
    make install

# We are using CMake
elif [[ $METHOD == 'cmake' || $METHOD == 'auto' && -e "CMakeLists.txt" ]]; then
    echo "Configuring using cmake"

    # Do an out of source build
    mkdir -p build
    cd build

    # Configure using cmake
    cmake .. $@ \
        -DCMAKE_BUILD_TYPE="Release" \
        -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
        -DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
        -DCMAKE_INSTALL_PREFIX:PATH="$PREFIX"

    # Run make
    make -j$(nproc)

    # Run make install
    make install

# We are using Boost.Build
elif [[ $METHOD == 'boost' || $METHOD == 'auto' && -e "Jamroot" ]]; then
    echo "Configuring using Boost.Build"

    # Bootstrap b2
    ./bootstrap.sh --prefix="$PREFIX"

    # Setup our include and library paths
    ./bjam include="$PREFIX/include" library-path="$PREFIX/lib"

    # Build and install
    ./b2 $@
    ./b2 install

# We are using standard makefiles
elif [[ $METHOD == 'make' || $METHOD == 'auto' && -e "Makefile" ]]; then
    echo "Building using make"

    export COMMON_OPT="$CFLAGS -O3"
    export FCOMMON_OPT="$CXXFLAGS -O3"

    make $@ -j$(nproc)

    make PREFIX="$PREFIX" install

else
    exit 1
fi
